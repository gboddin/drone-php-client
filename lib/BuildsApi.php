<?php
/**
 * BuildsApi
 * PHP version 5
 *
 * @category Class
 * @package  DroneClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Drone API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DroneClient\DroneClient;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use DroneClient\ApiException;
use DroneClient\Configuration;
use DroneClient\HeaderSelector;
use DroneClient\ObjectSerializer;

/**
 * BuildsApi Class Doc Comment
 *
 * @category Class
 * @package  DroneClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuildsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reposOwnerNameBuildsGet
     *
     * Get recent builds
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Build[]
     */
    public function reposOwnerNameBuildsGet($owner, $name)
    {
        list($response) = $this->reposOwnerNameBuildsGetWithHttpInfo($owner, $name);
        return $response;
    }

    /**
     * Operation reposOwnerNameBuildsGetWithHttpInfo
     *
     * Get recent builds
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Build[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameBuildsGetWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Build[]';
        $request = $this->reposOwnerNameBuildsGetRequest($owner, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Build[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameBuildsGetAsync
     *
     * Get recent builds
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsGetAsync($owner, $name)
    {
        return $this->reposOwnerNameBuildsGetAsyncWithHttpInfo($owner, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameBuildsGetAsyncWithHttpInfo
     *
     * Get recent builds
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsGetAsyncWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Build[]';
        $request = $this->reposOwnerNameBuildsGetRequest($owner, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameBuildsGet'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameBuildsGetRequest($owner, $name)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameBuildsGet');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameBuildsGet');
        }

        $resourcePath = '/repos/{owner}/{name}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameBuildsNumberGet
     *
     * Get the latest build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param string $branch name of the branch (optional)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Build
     */
    public function reposOwnerNameBuildsNumberGet($owner, $name, $number, $branch = null)
    {
        list($response) = $this->reposOwnerNameBuildsNumberGetWithHttpInfo($owner, $name, $number, $branch);
        return $response;
    }

    /**
     * Operation reposOwnerNameBuildsNumberGetWithHttpInfo
     *
     * Get the latest build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param string $branch name of the branch (optional)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameBuildsNumberGetWithHttpInfo($owner, $name, $number, $branch = null)
    {
        $returnType = '\DroneClient\DroneClient\Build';
        $request = $this->reposOwnerNameBuildsNumberGetRequest($owner, $name, $number, $branch);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Build', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameBuildsNumberGetAsync
     *
     * Get the latest build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param string $branch name of the branch (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsNumberGetAsync($owner, $name, $number, $branch = null)
    {
        return $this->reposOwnerNameBuildsNumberGetAsyncWithHttpInfo($owner, $name, $number, $branch)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameBuildsNumberGetAsyncWithHttpInfo
     *
     * Get the latest build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param string $branch name of the branch (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsNumberGetAsyncWithHttpInfo($owner, $name, $number, $branch = null)
    {
        $returnType = '\DroneClient\DroneClient\Build';
        $request = $this->reposOwnerNameBuildsNumberGetRequest($owner, $name, $number, $branch);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameBuildsNumberGet'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param string $branch name of the branch (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameBuildsNumberGetRequest($owner, $name, $number, $branch = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameBuildsNumberGet');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameBuildsNumberGet');
        }
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling reposOwnerNameBuildsNumberGet');
        }

        $resourcePath = '/repos/{owner}/{name}/builds/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($branch !== null) {
            $queryParams['branch'] = ObjectSerializer::toQueryValue($branch);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace('{' . 'number' . '}', ObjectSerializer::toPathValue($number), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameBuildsNumberPost
     *
     * Restart a build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Build
     */
    public function reposOwnerNameBuildsNumberPost($owner, $name, $number)
    {
        list($response) = $this->reposOwnerNameBuildsNumberPostWithHttpInfo($owner, $name, $number);
        return $response;
    }

    /**
     * Operation reposOwnerNameBuildsNumberPostWithHttpInfo
     *
     * Restart a build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameBuildsNumberPostWithHttpInfo($owner, $name, $number)
    {
        $returnType = '\DroneClient\DroneClient\Build';
        $request = $this->reposOwnerNameBuildsNumberPostRequest($owner, $name, $number);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Build', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameBuildsNumberPostAsync
     *
     * Restart a build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsNumberPostAsync($owner, $name, $number)
    {
        return $this->reposOwnerNameBuildsNumberPostAsyncWithHttpInfo($owner, $name, $number)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameBuildsNumberPostAsyncWithHttpInfo
     *
     * Restart a build
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameBuildsNumberPostAsyncWithHttpInfo($owner, $name, $number)
    {
        $returnType = '\DroneClient\DroneClient\Build';
        $request = $this->reposOwnerNameBuildsNumberPostRequest($owner, $name, $number);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameBuildsNumberPost'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameBuildsNumberPostRequest($owner, $name, $number)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameBuildsNumberPost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameBuildsNumberPost');
        }
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling reposOwnerNameBuildsNumberPost');
        }

        $resourcePath = '/repos/{owner}/{name}/builds/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace('{' . 'number' . '}', ObjectSerializer::toPathValue($number), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameLogsNumberJobDelete
     *
     * Cancel a Job
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reposOwnerNameLogsNumberJobDelete($owner, $name, $number, $job)
    {
        $this->reposOwnerNameLogsNumberJobDeleteWithHttpInfo($owner, $name, $number, $job);
    }

    /**
     * Operation reposOwnerNameLogsNumberJobDeleteWithHttpInfo
     *
     * Cancel a Job
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameLogsNumberJobDeleteWithHttpInfo($owner, $name, $number, $job)
    {
        $returnType = '';
        $request = $this->reposOwnerNameLogsNumberJobDeleteRequest($owner, $name, $number, $job);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameLogsNumberJobDeleteAsync
     *
     * Cancel a Job
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameLogsNumberJobDeleteAsync($owner, $name, $number, $job)
    {
        return $this->reposOwnerNameLogsNumberJobDeleteAsyncWithHttpInfo($owner, $name, $number, $job)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameLogsNumberJobDeleteAsyncWithHttpInfo
     *
     * Cancel a Job
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameLogsNumberJobDeleteAsyncWithHttpInfo($owner, $name, $number, $job)
    {
        $returnType = '';
        $request = $this->reposOwnerNameLogsNumberJobDeleteRequest($owner, $name, $number, $job);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameLogsNumberJobDelete'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameLogsNumberJobDeleteRequest($owner, $name, $number, $job)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameLogsNumberJobDelete');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameLogsNumberJobDelete');
        }
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling reposOwnerNameLogsNumberJobDelete');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling reposOwnerNameLogsNumberJobDelete');
        }

        $resourcePath = '/repos/{owner}/{name}/logs/{number}/{job}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace('{' . 'number' . '}', ObjectSerializer::toPathValue($number), $resourcePath);
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace('{' . 'job' . '}', ObjectSerializer::toPathValue($job), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameLogsNumberJobGet
     *
     * Get build logs
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reposOwnerNameLogsNumberJobGet($owner, $name, $number, $job)
    {
        $this->reposOwnerNameLogsNumberJobGetWithHttpInfo($owner, $name, $number, $job);
    }

    /**
     * Operation reposOwnerNameLogsNumberJobGetWithHttpInfo
     *
     * Get build logs
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameLogsNumberJobGetWithHttpInfo($owner, $name, $number, $job)
    {
        $returnType = '';
        $request = $this->reposOwnerNameLogsNumberJobGetRequest($owner, $name, $number, $job);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameLogsNumberJobGetAsync
     *
     * Get build logs
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameLogsNumberJobGetAsync($owner, $name, $number, $job)
    {
        return $this->reposOwnerNameLogsNumberJobGetAsyncWithHttpInfo($owner, $name, $number, $job)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameLogsNumberJobGetAsyncWithHttpInfo
     *
     * Get build logs
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameLogsNumberJobGetAsyncWithHttpInfo($owner, $name, $number, $job)
    {
        $returnType = '';
        $request = $this->reposOwnerNameLogsNumberJobGetRequest($owner, $name, $number, $job);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameLogsNumberJobGet'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param int $number sequential build number (required)
     * @param int $job sequential job number (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameLogsNumberJobGetRequest($owner, $name, $number, $job)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameLogsNumberJobGet');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameLogsNumberJobGet');
        }
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling reposOwnerNameLogsNumberJobGet');
        }
        // verify the required parameter 'job' is set
        if ($job === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job when calling reposOwnerNameLogsNumberJobGet');
        }

        $resourcePath = '/repos/{owner}/{name}/logs/{number}/{job}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace('{' . 'number' . '}', ObjectSerializer::toPathValue($number), $resourcePath);
        }
        // path params
        if ($job !== null) {
            $resourcePath = str_replace('{' . 'job' . '}', ObjectSerializer::toPathValue($job), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

}
