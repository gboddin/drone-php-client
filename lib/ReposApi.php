<?php
/**
 * ReposApi
 * PHP version 5
 *
 * @category Class
 * @package  DroneClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Drone API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DroneClient\DroneClient;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use DroneClient\ApiException;
use DroneClient\Configuration;
use DroneClient\HeaderSelector;
use DroneClient\ObjectSerializer;

/**
 * ReposApi Class Doc Comment
 *
 * @category Class
 * @package  DroneClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReposApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reposOwnerNameDelete
     *
     * Delete a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reposOwnerNameDelete($owner, $name)
    {
        $this->reposOwnerNameDeleteWithHttpInfo($owner, $name);
    }

    /**
     * Operation reposOwnerNameDeleteWithHttpInfo
     *
     * Delete a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameDeleteWithHttpInfo($owner, $name)
    {
        $returnType = '';
        $request = $this->reposOwnerNameDeleteRequest($owner, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameDeleteAsync
     *
     * Delete a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameDeleteAsync($owner, $name)
    {
        return $this->reposOwnerNameDeleteAsyncWithHttpInfo($owner, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameDeleteAsyncWithHttpInfo
     *
     * Delete a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameDeleteAsyncWithHttpInfo($owner, $name)
    {
        $returnType = '';
        $request = $this->reposOwnerNameDeleteRequest($owner, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameDelete'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameDeleteRequest($owner, $name)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameDelete');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameDelete');
        }

        $resourcePath = '/repos/{owner}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameEncryptPost
     *
     * Encrypt repo secrets
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reposOwnerNameEncryptPost($owner, $name)
    {
        $this->reposOwnerNameEncryptPostWithHttpInfo($owner, $name);
    }

    /**
     * Operation reposOwnerNameEncryptPostWithHttpInfo
     *
     * Encrypt repo secrets
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameEncryptPostWithHttpInfo($owner, $name)
    {
        $returnType = '';
        $request = $this->reposOwnerNameEncryptPostRequest($owner, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameEncryptPostAsync
     *
     * Encrypt repo secrets
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameEncryptPostAsync($owner, $name)
    {
        return $this->reposOwnerNameEncryptPostAsyncWithHttpInfo($owner, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameEncryptPostAsyncWithHttpInfo
     *
     * Encrypt repo secrets
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameEncryptPostAsyncWithHttpInfo($owner, $name)
    {
        $returnType = '';
        $request = $this->reposOwnerNameEncryptPostRequest($owner, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameEncryptPost'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameEncryptPostRequest($owner, $name)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameEncryptPost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameEncryptPost');
        }

        $resourcePath = '/repos/{owner}/{name}/encrypt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNameGet
     *
     * Get a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Repo
     */
    public function reposOwnerNameGet($owner, $name)
    {
        list($response) = $this->reposOwnerNameGetWithHttpInfo($owner, $name);
        return $response;
    }

    /**
     * Operation reposOwnerNameGetWithHttpInfo
     *
     * Get a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Repo, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNameGetWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNameGetRequest($owner, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Repo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNameGetAsync
     *
     * Get a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameGetAsync($owner, $name)
    {
        return $this->reposOwnerNameGetAsyncWithHttpInfo($owner, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNameGetAsyncWithHttpInfo
     *
     * Get a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNameGetAsyncWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNameGetRequest($owner, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNameGet'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNameGetRequest($owner, $name)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNameGet');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNameGet');
        }

        $resourcePath = '/repos/{owner}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNamePatch
     *
     * Updates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param \DroneClient\DroneClient\Repo $repo The updated repository JSON (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Repo
     */
    public function reposOwnerNamePatch($owner, $name, $repo)
    {
        list($response) = $this->reposOwnerNamePatchWithHttpInfo($owner, $name, $repo);
        return $response;
    }

    /**
     * Operation reposOwnerNamePatchWithHttpInfo
     *
     * Updates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param \DroneClient\DroneClient\Repo $repo The updated repository JSON (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Repo, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNamePatchWithHttpInfo($owner, $name, $repo)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNamePatchRequest($owner, $name, $repo);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Repo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNamePatchAsync
     *
     * Updates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param \DroneClient\DroneClient\Repo $repo The updated repository JSON (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNamePatchAsync($owner, $name, $repo)
    {
        return $this->reposOwnerNamePatchAsyncWithHttpInfo($owner, $name, $repo)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNamePatchAsyncWithHttpInfo
     *
     * Updates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param \DroneClient\DroneClient\Repo $repo The updated repository JSON (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNamePatchAsyncWithHttpInfo($owner, $name, $repo)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNamePatchRequest($owner, $name, $repo);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNamePatch'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @param \DroneClient\DroneClient\Repo $repo The updated repository JSON (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNamePatchRequest($owner, $name, $repo)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNamePatch');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNamePatch');
        }
        // verify the required parameter 'repo' is set
        if ($repo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $repo when calling reposOwnerNamePatch');
        }

        $resourcePath = '/repos/{owner}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($repo)) {
            $_tempBody = $repo;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reposOwnerNamePost
     *
     * Activates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DroneClient\DroneClient\Repo
     */
    public function reposOwnerNamePost($owner, $name)
    {
        list($response) = $this->reposOwnerNamePostWithHttpInfo($owner, $name);
        return $response;
    }

    /**
     * Operation reposOwnerNamePostWithHttpInfo
     *
     * Activates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \DroneClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DroneClient\DroneClient\Repo, HTTP status code, HTTP response headers (array of strings)
     */
    public function reposOwnerNamePostWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNamePostRequest($owner, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\DroneClient\DroneClient\Repo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reposOwnerNamePostAsync
     *
     * Activates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNamePostAsync($owner, $name)
    {
        return $this->reposOwnerNamePostAsyncWithHttpInfo($owner, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reposOwnerNamePostAsyncWithHttpInfo
     *
     * Activates a repo
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reposOwnerNamePostAsyncWithHttpInfo($owner, $name)
    {
        $returnType = '\DroneClient\DroneClient\Repo';
        $request = $this->reposOwnerNamePostRequest($owner, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'reposOwnerNamePost'
     *
     * @param string $owner owner of the repository (required)
     * @param string $name name of the repository (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reposOwnerNamePostRequest($owner, $name)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $owner when calling reposOwnerNamePost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reposOwnerNamePost');
        }

        $resourcePath = '/repos/{owner}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace('{' . 'owner' . '}', ObjectSerializer::toPathValue($owner), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

}
